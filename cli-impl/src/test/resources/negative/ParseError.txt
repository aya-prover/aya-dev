Trivial:
In file $FILE:1:0 ->

  1 │   def
    │   ╰─╯

Error: Expect a name

1 error(s), 0 warning(s).
Let's learn from that.

Modifier:
In file $FILE:1:0 ->

  1 │   overlap inductive E
    │   ╰─────╯

Error: The modifier overlap is not suitable here.

1 error(s), 0 warning(s).
Let's learn from that.

IgnoredModifier:
In file $FILE:1:0 ->

  1 │   inline def id {A : Type} A : A
    │   ╰────╯
  2 │   | a => a

Warning: Ignoring inline because it only applies to expression function bodies, 
         not pattern matching.

That looks right!

OverlapOnExpr:
In file $FILE:1:0 ->

  1 │   overlap def id {A : Type} (a : A) => a
    │   ╰─────╯

Warning: The modifier overlap is redundant, ignored.

That looks right!

IgnorePragma:
In file $FILE:1:1 ->

  1 │   @thisWillNeverBeARealPragma
    │    ╰────────────────────────╯
  2 │   def id {A : Type} (a : A) => a

Warning: Unrecognized pragma `thisWillNeverBeARealPragma` will be ignored.

That looks right!

IgnoreSuppressed:
In file $FILE:1:10 ->

  1 │   @suppress(thisWillNeverBeARealWarning)
    │             ╰─────────────────────────╯
  2 │   def id {A : Type} (a : A) => a

Warning: Unrecognized warning `thisWillNeverBeARealWarning` will be ignored.

That looks right!

MatchElim:
In file $FILE:1:23 ->

  1 │   def test => match elim Type, elim Type {}
    │                          ╰──╯

Error: Expect variable in match elim

In file $FILE:1:34 ->

  1 │   def test => match elim Type, elim Type {}
    │                                     ╰──╯

Error: Expect variable in match elim

Parsing interrupted due to:
2 error(s), 0 warning(s).
Let's learn from that.

MatchElimAs:
In file $FILE:1:18 ->

  1 │   def test => match elim e as a, elim f as b {}
    │                     ╰─────────╯

Error: Don't use as-binding together with elim. Just use the elim-variable 
       directly

In file $FILE:1:31 ->

  1 │   def test => match elim e as a, elim f as b {}
    │                                  ╰─────────╯

Error: Don't use as-binding together with elim. Just use the elim-variable 
       directly

Parsing interrupted due to:
2 error(s), 0 warning(s).
Let's learn from that.

ImplicitTuplePat:
In file $FILE:2:4 ->

  1 │   def test (Sig Type ** Type) : Type
  2 │   | ({a}, b) => a
    │       ╰╯

Error: Implicit pattern is not allowed here.

1 error(s), 0 warning(s).
Let's learn from that.

ImplicitListPat:
In file $FILE:4:4 ->

  2 │   open import arith::nat::base
  3 │   def test (List Nat) : Nat
  4 │   | [{a}] => a
    │       ╰╯

Error: Implicit elements in a list pattern is disallowed

1 error(s), 0 warning(s).
Let's learn from that.

IncorrectReturn:
In file $FILE:1:17 ->

  1 │   def lt_intersect : {A : Type} : A
    │                    ╰╯

Error: The return type syntax is incorrect.

Parsing interrupted due to:
1 error(s), 0 warning(s).
Let's learn from that.

Issue1390:
In file $FILE:1:0 ->

  1 │   parse error
    │   ╰─────────╯

Error: Expect statement, got repl expression

1 error(s), 0 warning(s).
Let's learn from that.

