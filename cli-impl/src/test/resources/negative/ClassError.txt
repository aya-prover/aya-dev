NotClassCall:
In file $FILE:1:31 ->

  1 │   def what (A : Type) : A => new A
    │                                  ╰╯

Error: The following instantiation is not good:
         A
       because the type you gave is not a class type, but instead:
         A

1 error(s), 0 warning(s).
Let's learn from that.

NotFullyApplied:
In file $FILE:3:28 ->

  1 │   class Kontainer
  2 │   | walue : ISet
  3 │   def what : Kontainer => new Kontainer
    │                               ╰───────╯

Error: Unable to new an incomplete class type: `Kontainer`

1 error(s), 0 warning(s).
Let's learn from that.

UnknownMember:
In file $FILE:3:30 ->

  1 │   open class Kontainer
  2 │   | walue : Set
  3 │   def what (k : Kontainer) => k.ummm
    │                                 ╰──╯

Error: Unknown member `ummm` projected

1 error(s), 0 warning(s).
Let's learn from that.

SigmaCon:
In file $FILE:1:19 ->

  1 │   def bruh : Type => (ISet, Set)
    │                      ╰─────────╯

Error: The following tuple introduction is not good:
         (ISet, Set 0)
       because the type you checked it against is not a Sigma type, but instead:
         Type 0

1 error(s), 0 warning(s).
Let's learn from that.

SigmaAcc:
In file $FILE:1:30 ->

  1 │   def bruh (A : Type) : Type => A.1
    │                                 ╰─╯

Error: The following 1st element projection is not good:
         A.1
       because the type of what you projected on is not a Sigma type, but 
       instead:
         Type 0

1 error(s), 0 warning(s).
Let's learn from that.

SigmaProj:
In file $FILE:1:41 ->

  1 │   def bruh (A : Sig Type ** ISet) : Set => A.3
    │                                            ╰─╯

Error: Index can only be 1 or 2, there's no 3rd projection

1 error(s), 0 warning(s).
Let's learn from that.

InstNotFound:
In file $FILE:2:12 ->

  1 │   open class Ok | A : Type
  2 │   def test => A
    │               ╰╯

Error: Instances for the class-call Ok not found

1 error(s), 0 warning(s).
Let's learn from that.

DiffClass:
In file $FILE:3:16 ->

  1 │   class A
  2 │   class B
  3 │   def test : B => new A
    │                   ╰───╯

Error: Expected an instance of class B but got A

1 error(s), 0 warning(s).
Let's learn from that.

AmbInstances:
In file $FILE:2:22 ->

  1 │   open class A | foo : Type
  2 │   def test (a b : A) => foo
    │                         ╰─╯

Error: Non-unique instances for the class-call A found: a, b

1 error(s), 0 warning(s).
Let's learn from that.

NotInstance:
In file $FILE:2:25 ->

  1 │   open inductive Unit | unit
  2 │   def test => let instance u := unit in u
    │                            ╰╯

Error: To be an instance, the type should be a class-call, but it isn't:
         Unit

1 error(s), 0 warning(s).
Let's learn from that.

