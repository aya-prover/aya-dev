open import prelude

def something (a : Nat)
 : a + 1 + a = 1 + a + a => refl

def issue1061 : Nat -> Nat
| n => Nat::suc n

module Issue942 {
  open import arith::nat::properties
  open inductive Wrapper (P : Type)
  | wrap (P -> Empty)

  def what? (m : Nat) : Wrapper (suc m = 0) =>
    wrap (\ x => z≠s (pinv x))
}

module Issue1130 {
  def f (p : I -> Nat) => 0
  def test => f (refl {a := 1})
}

module Issue1144 {
  open inductive NewList (A : Type)
  | newNil
  | newCons A (NewList A)

  private def test : NewList Nat => [ 0 ]
}

module Issue1145 {
  open Issue1144
  open inductive NewNat : Type
  | newZero
  | newSucc (pred : NewNat)

  def test : NewList Nat => [ 0 ]
}

module PullRequest1156 {
  def intro : Sig Nat ** Nat => (0 , 0)
  def elimmm (p : Sig Nat ** Nat) : Nat
  | (a, b) => a

  def id {A : Type} (x : A) : A => x
  def idTestR (t : Sig Nat ** Nat) : t = id t => refl
  def idTestL (t : Sig Nat ** Nat) : id t = t => refl
}

module PullRequest1171 {
  def etaTestR (t : Sig Nat ** Nat) : t = (t.1 , t.2) => refl
  def etaTestL (t : Sig Nat ** Nat) : (t.1 , t.2) = t => refl
}

module Issue1181 {
  def how {A B : Type} (f : A -> B) (a : A) : B => f a
  def what {A B : Type} (a : A) (f : A -> B) : B => how (fn g => g a) f
}

module Issue1185 {
  open Issue1181 hiding (what)
  def erm {A B : Type} (f : Sig A ** B) => how (fn t => t.1) f
  @suppress(MostGeneralSolution)
  def sigma {A B : Type} (f : Sig A ** B) => how (fn t => t.2) f
}

module Issue1187 {
  variable A B : Type
  def FunExt (f g : A -> B) (p : ∀ a -> f a = g a) => (fn a => f a) = g
  def FunExt' (f g : A -> B) (p : ∀ a -> f a = g a) => (fn a => f a) = (fn a => g a)
}

module Issue1194 {
  def inheritMode (a : Nat) : Nat => match a { _ => 1 }
  def synthMode (a : Nat) : Nat =>
   match a returns Nat -> Nat { _ => fn x => x } 1

  def depTy (a : Nat) (P : Nat -> Type)
     (bc : P 0)
     (ic : ∀ n -> P (suc n)) : P (a + a) =>
   match a + a as x returns P x {
    | 0 => bc
    | suc n => ic n
   }
}

module PullRequest1213 {
  open inductive Store (n : Nat) | make

  def nonInjective Nat Nat : Nat => 0
  def the (A : Type) (x : A) : A => x

  def test => let
    | x : Nat := _
    | y := the (Store (nonInjective 1 114)) (make {nonInjective x 514})
    in the (Store (the _ 2)) (make {the _ x})
}

module Issue1232 {
  def - : Nat => 1
  def --> : Nat => 1
}

module Issue1249 {
  variable A B : Type
  def transp (p : A = B) (a : A) : B => coe 0 1 p a
}

module Issue94 {
  def absurd (A : Type) : Empty -> A => fn ()
  def obvious : Fn (a : Sig Nat ** Nat) -> Nat => fn { (a, b) => a + b }
}

// relies on match elim
// open inductive IsZero Nat
// | zero => ack
// def irrefutable : Fn (a : Nat) -> IsZero a -> Nat => fn { zero, ack => 233 }

module Issue243 {
  open import data::vec using (Vec, [], :>)
  open import data::maybe using (Maybe, just, nothing)
  def last {A : Type} {n : Nat} (Vec (suc n) A) : A
  | x :> [] => x
  | _ :> xs => last xs

  def MM (A : Type) => Maybe (Maybe A)
  variable A : Type

  def FF (MM A) : Type
  | just nothing => Nat
  | _ => suc zero = 1

  def peigei (a : MM A) : FF a
  | just (just _) => refl
  | nothing => refl
  | _ => 233
}

module PullRequest1226 {
  variable A : Type
  variable a b : A
  def basic (a = a) => a
}
