open import prelude

class Kontainer
| Taipe : Type
| walue : Taipe

def tyck0 : Nat => Kontainer::walue {new Kontainer Nat 0}

def norm0 : Kontainer::walue {new Kontainer Nat 0} = 0 => refl

def subtype : Kontainer Nat => new Kontainer Nat 0
// In core:
// def subtype : Kontainer Nat => cast [Taipe := Nat] [walue := 0] (new Kontainer Nat 0)

def norm1 : Kontainer::walue {subtype} = 0 => refl
// In core:
// (cast [Taipe := Nat] [walue := 0] (new Kontainer Nat 0)) .walue
// -> 0 (it is recorded in the ClassCastTerm!)

def projTest (a : Kontainer) => Kontainer::walue

def letTest (f : Nat -> Kontainer) =>
  let instance x := f 0 in Kontainer::Taipe
