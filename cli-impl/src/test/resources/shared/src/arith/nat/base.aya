open import relation::binary::path
open import arith::bool

open inductive Nat | zero | suc Nat

variable a b c : Nat

overlap def infixl + Nat Nat : Nat
| 0, b => b
| a, 0 => a
| suc a, b => suc (a + b)
| a, suc b => suc (a + b)
tighter =

def subTrunc (x y : Nat) : Nat
| n, 0 => n
| 0, suc _ => 0
| suc n, suc m => subTrunc n m

overlap def +-comm : a + b = b + a elim a b
| 0, _ => refl
| suc _, _ => pmap suc +-comm
| _, 0 => refl
| _, suc _ => pmap suc +-comm

overlap def +-assoc : a + (b + c) = (a + b) + c elim a b c
| 0, _, _ => refl
| _, 0, _ => refl
| _, _, 0 => refl
| suc _, _, _ => pmap suc +-assoc
| _, suc _, _ => pmap suc +-assoc
| _, _, suc _ => pmap suc +-assoc

overlap def infixl * Nat Nat : Nat
| 0, n => 0
| m, 0 => 0
| suc m, n => n + m * n
tighter +
