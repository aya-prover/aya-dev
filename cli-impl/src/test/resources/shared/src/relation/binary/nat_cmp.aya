open import arith::nat using (Nat, zero, suc, z≠s, subTrunc)
open import relation::unary::negation using (neg)
open import relation::nullary::empty using (exfalso)
open import relation::binary::path

def infix <= (a b : Nat) : Type => subTrunc a b = 0

def infix < (a b : Nat) : Type => (suc a) <= b

def infix >= (a b : Nat) : Type => subTrunc b a = 0

def infix > (a b : Nat) : Type => a >= (suc b)

def n<z→⊥ (n : Nat) : neg (n < 0) => fn eq => exfalso (z≠s (pinv eq))

def s<s (a b : Nat) (p : suc a < suc b) : a < b => p
