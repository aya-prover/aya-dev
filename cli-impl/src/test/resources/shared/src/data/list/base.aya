open import arith::nat::base
open import relation::binary::path
open import data::maybe using (Maybe, just, nothing)

open inductive List (A : Type)
| nil
| infixr :< A (List A) tighter =

variable A B : Type

def length (List A) : Nat
| [ ] => 0
| x :< xs => 1 + length xs

overlap def infixr ++ (xs ys : List A) : List A
| [ ], _ => ys
| _, [ ] => xs
| x :< xs', _ => x :< (xs' ++ ys)
tighter =

def map (f : A -> B) (xs : List A) : List B elim xs
| [ ] => [ ]
| x :< xs' => f x :< map f xs'

def rev' (buf xs : List A) : List A elim xs
| [ ] => buf
| x :< xs' => rev' (x :< buf) xs'

def rev (xs : List A) : List A => rev' [ ] xs

@suppress(Shadowing)
overlap def take (n : Nat) (xs : List A) : List A
| _, [ ] => [ ]
| 0, _ => [ ]
| suc n, x :< xs => x :< (take n xs)

@suppress(Shadowing)
overlap def drop (n : Nat) (xs : List A) : List A
| _, [ ] => [ ]
| 0, _ => xs
| suc n, x :< xs => drop n xs

def infixl !! (List A) Nat : Maybe A
| [ ], _ => nothing
| x :< _, 0 => just x
| _ :< xs, suc n => xs !! n
tighter =

def insert (n : Nat) (x : A) (xs : List A) : List A => take n xs ++ [ x ] ++ drop n xs
