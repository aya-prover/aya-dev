open import arith::nat::base
open import arith::bool using (Bool, true, false)
open import data::list::base
open import relation::binary::path
open import relation::binary::nat_cmp
open import relation::nullary::empty
open import relation::nullary::decidable hiding (map)

variable A B C : Type

def length-map (f : A -> B) (l : List A) : length (map f l) = length l elim l
| [ ] => refl
| x :< xs => pmap suc (length-map f xs)

def length-++ (xs ys : List A) : length (xs ++ ys) = length xs + length ys elim xs
| [ ] => refl
| x :< xs' => pmap suc (length-++ _ _)

def map-comp (g : B -> C) (f : A -> B) (l : List A) : map (\x => g (f x)) l = map g (map f l) elim l
| [ ] => refl
| x :< xs => pmap (g (f x) :<) (map-comp g f xs)

def map-id (l : List A) : map (\x => x) l = l
| [ ] => refl
| x :< xs => pmap (x :<) (map-id xs)

def head-def (x : A) (xs : List A) : A elim xs
| [ ] => x
| a :< _ => a

@suppress(Shadowing)
def ++-assoc (xs ys zs : List A) : (xs ++ ys) ++ zs = xs ++ (ys ++ zs) elim xs
| [ ] => refl
| x :< xs => pmap (x :<) (++-assoc xs ys zs)

@suppress(Shadowing)
private def rev'-map (f : A -> B) (buf xs : List A) : map f (rev' buf xs) = rev' (map f buf) (map f xs) elim xs
| [ ] => refl
| x :< xs => rev'-map f (x :< buf) xs

def rev-map (f : A -> B) (xs : List A) : map f (rev xs) = rev (map f xs) => rev'-map f [ ] xs

@suppress(Shadowing)
private def rev'-++ (buf xs : List A) : rev' buf xs = rev xs ++ buf elim xs
| [ ] => refl
| x :< xs =>
  let
  | step0 := rev'-++ (x :< buf) xs
  | step1 := pmap (++ buf) (rev'-++ [ x ] xs)
  | step2 : (rev xs ++ [ x ]) ++ buf = rev xs ++ (x :< buf) := ++-assoc (rev xs) [ x ] buf
  in step0 <=> pinv step2 <=> pinv step1

@suppress(Shadowing)
def rev-distrib-++ (xs ys : List A) : rev (xs ++ ys) = (rev ys ++ rev xs) elim xs
| [ ] => refl
| x :< xs =>
  let
  | step0 : rev' [ x ] (xs ++ ys) = rev (xs ++ ys) ++ [ x ] := rev'-++ _ _
  | step1 : rev (xs ++ ys) ++ [ x ] = (rev ys ++ rev xs) ++ [ x ] := pmap (++ [ x ]) (rev-distrib-++ _ _)
  | step2 : (rev ys ++ rev xs) ++ [ x ] = rev ys ++ (rev xs ++ [ x ]) := ++-assoc _ _ _
  | step3 : rev ys ++ rev' [ x ] xs = rev ys ++ (rev xs ++ [ x ]) := pmap (rev ys ++) (rev'-++ _ _)
  in step0 <=> step1 <=> step2 <=> pinv step3

def ++-!!-l (i : Nat) (xs ys : List A) (i < length xs) : (xs ++ ys) !! i = xs !! i
| _, [ ], _, p => exfalso (n<z→⊥ p)
| 0, x :< xs', _, _ => refl
| suc i', x :< xs', _, p => ++-!!-l i' xs' ys p

def take<=length (i : Nat) (xs : List A) (i <= length xs)
  : length (take i xs) = i
| 0, _, _ => refl
| suc i, [ ], p => exfalso (n<z→⊥ p)
| suc i, x :< xs, p => pmap suc (take<=length _ _ (s<=s p))

def drop<=length (i : Nat) (xs : List A)
  : length (drop i xs) = subTrunc (length xs) i
| _, [ ] => refl
| 0, x :< xs => refl
| suc i, x :< xs => drop<=length i xs

def insert<=length
  (i : Nat) (x : A) (xs : List A) (p : i <= length xs)
  : length (insert i x xs) = length xs + 1
  => match i <=? length xs {
  | _ because (reflect_true _) => let
    | myGoal! : length (drop i xs) + length (take i xs) = length xs := transport
        (fn a => a + length (take i xs) = length xs) (pinv (drop<=length _ _))
        (transport
          (fn a => (subTrunc (length xs) i + a = length xs)) (pinv (take<=length _ _ p))
          (a-b+b=a _ _ p))
    | BanGDream : length (take i xs) + length (drop i xs) = length xs := transport (fn lhs => lhs = length xs) +-comm myGoal!
    | haruhikage : suc (length (take i xs) + length (drop i xs)) = suc (length xs) := pmap suc BanGDream
    | nande : length (take i xs ++ (x :< drop i xs)) = suc (length (take i xs) + length (drop i xs)) := length-++ _ _
    in nande <=> haruhikage
  | _ because (reflect_false np<) => exfalso (np< p)
  }
