public open import Primitives using
  ( I
  , Partial
  , intervalInv as fixl ~ tighter =
  , intervalMin as infix /\  looser \/
  , intervalMax as infix \/ looser ~
  , coe
  )

variable A B C D : Type

def Path (A : I -> Type) (a : A 0) (b : A 1) : Type => [| i |] A i {| ~ i := a | i := b |}
def Eq (A : Type) (a b : A) : Type => Path (\ i => A) a b
def infix = {A : Type} => Eq A
def idp {a : A} : a = a => \i => a
def funExt (f g : A -> B) (p : forall a -> f a = g a) : f = g => \i a => p a i
def pmap (f : A -> B) {a b : A} (p : a = b) : f a = f b => \i => f (p i)
def sym {a b : A} (p : a = b) : b = a => \i => p (~ i)

def psqueeze {a b : A} (p : a = b) (i : I)
 : a = p i => \j => p (i /\ j)

def J {a : A} (B : Pi (b : A) -> a = b -> Type)
      (r : B a idp) {b : A} (p : a = b) : B b (\i => p i) =>
      coe (\ i => B (p i) (\j => p (j /\ i))) 0 r

def transport {a b : A} (B : A -> Type) (p : a = b) (x : B a) : B b
  => J (\b' p' => B b') x p

-- Bye, regularity!
-- def Jβ {a : A} (B : Pi (b : A) -> a = b -> Type)
--         (r : B a idp) : J B r idp = r => idp

def funExt2 (f g : A -> B -> C) (p : forall a b -> f a b = g a b) : f = g
  => \ i a b => p a b i

def funExt3 (f g : A -> B -> C -> D) (p : forall a b c -> f a b c = g a b c) : f = g
  => \ i a b c => p a b c i

-- The most general path mapping
def pmapd' {A : I -> Type} (B : Pi (i : I) (A i) -> Type)
    (f : Pi (i : I) (a : A i) -> B i a)
    {a : A 0} {b : A 1} (p : Path A a b)
  : Path (\i => B i (p i)) (f 0 a) (f 1 b) => \ i => f i (p i)

def hcomp2d
  {a b c d : A}
  (p : a = b)
  (q : b = d)
  (r : a = c) : c = d
  => \i => coe (\ k => r k = q k) 0 p i

def infixr <==> {a b c : A} (p : a = b) (q : b = c) : a = c =>
  \k => hcomp2d p q idp k

def infixr <==>'
  (p : [| i |] A)
  (q : [| i |] A {| ~ i := p 1 |})
  : p 0 = q 1 =>
  coe (\ k => p 0 = q k) 0 (λ j => p j)
  tighter <==>
