open import Paths
open import Arith::Nat
open import Data::Fin

public open data List (A : Type) : Type
| nil
| infixr :< A (List A)
tighter =

variable A B C : Type

def length (l : List A) : Nat
| nil => 0
| _ :< l => suc (length l)

def infix !! (l : List A) (i : Fin (length l)) : A
| a :< _, fzero => a
| _ :< l, fsuc i => l !! i

def overlap infixr ++ (xs ys : List A) : List A
| nil, ys => ys
| xs, nil => xs
| a :< xs, ys => a :< (xs ++ ys)
tighter =

def concat (l : List (List A)) : List A
| nil => nil
| xs :< xss => xs ++ concat xss

def ++-assoc {xs ys zs : List A} : (xs ++ ys) ++ zs = xs ++ (ys ++ zs)
| {A}, {nil} => idp
| {A}, {x :< xs} => pmap (x :<) ++-assoc

def ++nil {l : List A} : l ++ nil = l
| {A}, {nil} => idp
| {A}, {a :< l} => pmap (a :<) ++nil

def map (f : A -> B) (l : List A) : List B
| f, nil => nil
| f, a :< l => f a :< map f l

def length_map (f : A -> B) (l : List A) : length (map f l) = length l
| f, nil => idp
| f, a :< l => pmap suc (length_map f l)

def map_comp (g : B -> C) (f : A -> B) (l : List A) : map (\x => g (f x)) l = map g (map f l)
| _, _, nil => idp
| g, f, a :< l => pmap (g _ :<) (map_comp g f l)

def map_id (l : List A) : map (\x => x) l = l
| nil => idp
| a :< l => pmap (a :<) (map_id l)

def headDef (x : A) (xs : List A) : A
| x, nil => x
| _, a :< _ => a

def curry (t : Sig A ** B) (f : A -> B -> C) => f t.1 t.2

def splitAt (n : Nat) (l : List A) : Sig (List A) ** (List A)
| 0, l => (nil, l)
| suc n, nil => (nil, nil)
| suc n, a :< l => curry (splitAt n l) (\l1 l2 => (a :< l1, l2))

def take (n : Nat) (l : List A) => (splitAt n l).1

def drop (n : Nat) (l : List A) => (splitAt n l).2

def replace (l : List A) (i s : Nat) (r : List A) =>
  curry (splitAt i l) (\l1 l2 => l1 ++ r ++ drop s l2)

def splitAt-appendLem (n : Nat) (l : List A) : take n l ++ drop n l = l
| 0, l => idp
| suc n, nil => idp
| suc n, a :< l => pmap (a :<) (splitAt-appendLem n l)

def slice (l : List A) (i s : Nat) => take s (drop i l)

def slice-appendLem (l : List A) (i s : Nat)
   : take i l ++ (slice l i s ++ drop s (drop i l)) = l
| l, 0, s => splitAt-appendLem s l
| nil, suc i, 0 => idp
| nil, suc i, suc s => idp
| a :< l, suc i, s => pmap (a :<) (slice-appendLem l i s)

----- functorial -----
def fmap {A B : Type} => map {A} {B}

def pure (x : A) : List A => x :< nil

def infixl <*> (fs : List (A -> B)) (xs : List A) : List B
| nil, _ => nil
| f :< fs, xs => (fmap f xs) ++ (fs <*> xs)
  tighter =
  looser  +

def empty {A : Type} : List A => nil

def infixl <|> (l1 l2 : List A) : List A => l1 ++ l2
  tighter =
  looser  <*>

----- monadic -----
def return {A : Type} => pure {A}

def join {A : Type} => concat {A}

def infix >>= (l : List A) (f : A -> List B) : List B => join (fmap f l)
tighter =
--
-- def infix >> (l1 : List A) (l2 : List B) : List B => do l1, l2
-- tighter =
--
-- def liftM (f : A -> B) (l : List A) : List B =>
--   do x <- l,
--      return (f x)
--
-- def ap (fs : List (A -> B)) (xs : List A) : List B =>
--   do f <- fs,
--      x <- xs,
--      return (f x)
--
-- def infix >=> (f : A -> List B) (g : B -> List C) : A -> List C => \x => f x >>= g
-- tighter =
