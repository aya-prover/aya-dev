open import Paths

def par1 (A : Type) (u : A) (i : I) : Partial (~ i) A =>
  {| ~ i := u |}

-- By @imkiva, in PR
def p1 (A : Type) (a : A) (i : I) : Partial (~ i) A =>
  {| ~ i := a |}
def p2 (A : Type) (b : A) (j : I) : Partial (~ j) A =>
  {| ~ j := b |}
def p1=p2 (A : Type) (a : A) (i : I) : p1 A a i = p2 A a i =>
  idp

def cmp {A : Type} (x : A)
  : [| i j |] (Partial (~ j) A) {| ~ i := p1 A x j |}
  => \i => \j => p2 A x j

def transport-constant (A : I -> Type) (a : A 0) (i : I) : A i
  => (\j => A (i /\ j)).coe a freeze ~ i
-- ^ `A (i /\ j)` normalizes to `A 0` under cofibration `~ i`, which is a constant.

def transport  (A : I -> Type) (a : A 0) : A 1 => A.coe a
def transport' (A : I -> Type) (a : A 0) : A 1 => A.coe a freeze 0

def id {A : Type} (a: A) : A => a
def transportID {A : Type} (a: A) : A => (transport' (\ i => A -> A) id) a

def coePi (A : I -> Type) (B : Pi (i : I) -> A i -> Type)
    (f : Pi (a : A 0) -> B 0 a) : Pi (a : A 1) -> B 1 a
    => \a => (\i => B i ((\j => A (~ j \/ i)).coe a freeze i)).coe f
      ((\i => A (~ i)).coe a)

def coePi2 (A : I -> Type) (B : Pi (i : I) -> A i -> Type)
    (f : Pi (a : A 0) -> B 0 a) : Pi (a : A 1) -> B 1 a
    => (\i => Pi (x : A i) -> B i x).coe f
